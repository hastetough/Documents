7. Responsive design:
	a. use <meta name="viewport" content="width=device-width, initial-scale=1.0"> <!device-width: follow the device width, initial-scale: initial zoom level>
		A responsive grid-view often has 12 columns, and has a total width of 100%, and will shrink and expand as you resize the browser window.
		By default, the width and height of an element is calculated like this:

		width + padding + border = actual width of an element
		height + padding + border = actual height of an element
		
		first border comes   then the padding   then the actual element   
		so, padding size and border is extra . box-sizing  property solves that.  so, within that element height/width border and padding will also include.
		
		
		
	b. use   *{ box-sizing: border-box; }
	
	c.  use a responsive grid-view with 12 columns, to have more control over the web page.
		.col-1 {width: 8.33%;}
		.col-2 {width: 16.66%;}
		.col-3 {width: 25%;}
		.col-4 {width: 33.33%;}
		.col-5 {width: 41.66%;}
		.col-6 {width: 50%;}
		.col-7 {width: 58.33%;}
		.col-8 {width: 66.66%;}
		.col-9 {width: 75%;}
		.col-10 {width: 83.33%;}
		.col-11 {width: 91.66%;}
		.col-12 {width: 100%;}
	d. use floating to left for all columns and padding 
		[class*="col-"] {
		  float: left;
		  padding: 15px;
		  border: 1px solid red;
		}
	e. Each row should be wrapped in a <div>. The number of columns inside a row should always add up to 12:
		 <div class="row">
 			 <div class="col-3">...</div> <!-- 25% -->
  			 <div class="col-9">...</div> <!-- 75% -->
		 </div> 
	f. clears the flow:
		.row::after {
		  content: "";
		  clear: both;
		  display: table;
		}
	g. use Media Queries (css3) It uses the @media rule to include a block of CSS properties only if a certain condition is true.
		ex:     @media only screen and (max-width: 600px) {
			  body {
			    background-color: lightblue;
			  }
			}

	h.  add a break point. Always Design for Mobile First.  point g should be changed by now. i.e.
		for ex: Instead of changing styles when the width gets smaller than 768px, we should change the design when the width gets larger than 768px. This 				will make our design Mobile First:
		 /* For mobile phones: */
		[class*="col-"] {
		  width: 100%;
		}

		@media only screen and (min-width: 600px) {
		  /* For tablets: */
		  .col-s-1 {width: 8.33%;}
		  .col-s-2 {width: 16.66%;}
		  .col-s-3 {width: 25%;}
		  .col-s-4 {width: 33.33%;}
		  .col-s-5 {width: 41.66%;}
		  .col-s-6 {width: 50%;}
		  .col-s-7 {width: 58.33%;}
		  .col-s-8 {width: 66.66%;}
		  .col-s-9 {width: 75%;}
		  .col-s-10 {width: 83.33%;}
		  .col-s-11 {width: 91.66%;}
		  .col-s-12 {width: 100%;}
		}

		@media only screen and (min-width: 768px) {
		  /* For desktop: */
		  .col-1 {width: 8.33%;}
		  .col-2 {width: 16.66%;}
		  .col-3 {width: 25%;}
		  .col-4 {width: 33.33%;}
		  .col-5 {width: 41.66%;}
		  .col-6 {width: 50%;}
		  .col-7 {width: 58.33%;}
		  .col-8 {width: 66.66%;}
		  .col-9 {width: 75%;}
		  .col-10 {width: 83.33%;}
		  .col-11 {width: 91.66%;}
		  .col-12 {width: 100%;}
		} 
		 <div class="row">
		  <div class="col-3 col-s-3">...</div>
		  <div class="col-6 col-s-9">...</div>
		  <div class="col-3 col-s-12">...</div>
		</div> 
	i. use image   max-width:100%
		background-size Different Images for Different Device <picture>
also can use css responsive design template and can modify the page

8. grid design   https://www.w3schools.com/css/css_grid.asp
	divide the whole page into grids first. ie. column and rows.    both for mobile and desktop. so there will be two different design.
	
	 <div class="grid-container">
	  <div class="grid-item">1</div>
	  <div class="grid-item">2</div>
	  <div class="grid-item">3</div>
	  <div class="grid-item">4</div>
	  <div class="grid-item">5</div>
	  <div class="grid-item">6</div>
	  <div class="grid-item">7</div>
	  <div class="grid-item">8</div>
	  <div class="grid-item">9</div>
	</div> 

	.grid-container {
  		display: grid;
  		grid-column-gap:  ;
		grid-row-gap:   ;
		grid-gap:   ;
		grid-template-columns: auto auto auto auto;  //contain 4 columns, specify the width of the 4 columns, or "auto" if all columns should have the same width.
		grid-template-rows: rf rf; //2 rows
		justify-content: center;
		align-content: center;
		grid-template-areas: 'header header header header header header' 'menu main main main right right' 'menu footer footer footer footer footer';
	}

	.item1 {
		grid-area: header;
		 		or
  		grid-column: 1 / 5; //Make "item1" start on column 1 and end before column 5:
  		grid-row: 1 / 4;
	}
	
	https://grid.layoutit.com/
	conclusion: the fixed is fixed, only %parts are resized. but if you want to flow some portions as varies width, then use responsive. always use row. se grid and media queries.
	grid-template-columns: repeat(3, minmax(0, 1fr)); for grid blowout  fixed size column, no stretch.
9. php use master page concept , the csi  instead of php include

10. use CMS content management system
	how it works:  use a class on my html tag for which i want to change the content. then use a cms(can be done online) and through ftp the cms will check for that class and hence can be updatable. (cushy cms)
	again... the cms can be installed on a server, like wordpress
	>>>create wordpress template for each editable page <?php /* Template Name: Page_name */ ?>
	>>>then log in to server wordpress > go to pages> add new pages > choose template Page_name(added in php) > publish
	wordpress uses php and mysql
	
	
11. Layouts small components
	Margin is outer space of an element, while padding is inner space of an element. 
	Generally if you want to put any element at center position then margin:auto works perfectly. But it only works in block elements.
	Display property: Every HTML element has a default display value depending on what type of element it is. The default display value for most elements is 	 block or inline
	A block-level element always starts on a new line and takes up the full width available (stretches out to the left and right as far as it can).
	ex of block level element: 
				    <div>
				    <h1> - <h6>
				    <p>
				    <form>
				    <header>
				    <footer>
				    <section>

	An inline element does not start on a new line and only takes up as much width as necessary. Examples of inline elements:
				    <span>
				    <a>
				    <img>
	Compared to display: inline, the major difference is that display: inline-block allows to set a width and height on the element.
	Compared to display: block, the major difference is that display: inline-block does not add a line-break after the element, so the element can sit next to 		other elements.
	display: none; is commonly used with JavaScript to hide and show elements without deleting and recreating them.
	
	visibility:hidden don't clear the empty space as display:None does;
12. css selectors like :hover etc..   https://www.w3schools.com/cssref/css_selectors.asp
13. icon The simplest way to add an icon to your HTML page, is with an icon library, such as Font Awesome.
15. overflow.  it works with only one element inside.  i.e. if 3 images are there, then they had be wrapped in  a single div(with width , i.e. shape it) to work.
16. position, absolute inside relative is better
17. css arctitecture is best. SMACSS
	use 1 file
	5 categories, base,layout,modules,state,theme
	base: (resets,default styles are here)font-family,box-sizing,color:red (no class) use tags
	layout: navbar, slidenav, footer  use (ID)
18. template engine

